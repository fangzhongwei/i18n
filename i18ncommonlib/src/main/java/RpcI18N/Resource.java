// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `i18n.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RpcI18N;

public class Resource extends Ice.ObjectImpl
{
    public Resource()
    {
        code = "";
        lan = "";
        desc = "";
    }

    public Resource(long id, int type, String code, String lan, String desc, int version)
    {
        this.id = id;
        this.type = type;
        this.code = code;
        this.lan = lan;
        this.desc = desc;
        this.version = version;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new Resource();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RpcI18N::Resource"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.writeLong(id);
        __os.writeInt(type);
        __os.writeString(code);
        __os.writeString(lan);
        __os.writeString(desc);
        __os.writeInt(version);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        id = __is.readLong();
        type = __is.readInt();
        code = __is.readString();
        lan = __is.readString();
        desc = __is.readString();
        version = __is.readInt();
        __is.endReadSlice();
    }

    public long id;

    public int type;

    public String code;

    public String lan;

    public String desc;

    public int version;

    public Resource
    clone()
    {
        return (Resource)super.clone();
    }

    public static final long serialVersionUID = -935011802866009116L;
}
